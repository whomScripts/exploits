local UserInputService = game:GetService("UserInputService")
local Loader =
	loadstring(game:HttpGet("https://raw.githubusercontent.com/whomScripts/exploits/main/bootloader.lua", false))()
local Signal = Loader("Signal")
local Dragify = Loader("Dragify")

local ScreenGui = Instance.new("ScreenGui")

ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Name = "uiLib"

local lib = {}

lib.Colors = {}
lib.Colors.Underline = Color3.new(1, 0, 0)
lib.Colors.Header = Color3.new(0.235294, 0.235294, 0.235294)
lib.Colors.Body = Color3.new(0.27451, 0.27451, 0.27451)
lib.Colors.Text = Color3.new(0.85098, 0.85098, 0.85098)
lib.Colors.Button = Color3.new(0.235294, 0.235294, 0.235294)
lib.Colors.Dropdown = Color3.new(0.196078, 0.196078, 0.196078)
lib.Colors.PlaceholderText = Color3.new(0.635294, 0.635294, 0.635294)
lib.Colors.HideButton = Color3.new(0.941177, 0.941177, 0.941177)
lib.Colors.Border = Color3.new(102 / 255, 102 / 255, 102 / 255)
lib.Colors.Checkbox = {}
lib.Colors.Checkbox.Checked = Color3.new(230 / 255, 230 / 255, 230 / 255)
lib.Colors.Checkbox.Unchecked = Color3.new(0.235294, 0.235294, 0.235294)

local function getNextWindowPos()
	local biggest = 0
	local ok = nil
	for _, v in pairs(ScreenGui:GetChildren()) do
		if v.Position.X.Offset > biggest then
			biggest = v.Position.X.Offset
			ok = v
		end
	end
	if biggest == 0 then
		biggest = biggest + 5
	else
		biggest = biggest + ok.Size.X.Offset + 5
	end

	return biggest
end

function lib.Window(windowTitle, visiblityKeybind)
	local Top = Instance.new("Frame")
	local Style = Instance.new("Frame")
	local Body = Instance.new("Frame")
	local Title = Instance.new("TextLabel")
	local Hide = Instance.new("TextButton")

	Top.Name = windowTitle

	Top.BackgroundColor3 = lib.Colors.Header
	Top.BorderSizePixel = 0
	Top.Position = UDim2.new(0, getNextWindowPos() + 100, 0, 100)
	Top.Size = UDim2.new(0, 250, 0, 25)
	Top.Active = true
	Top.Parent = ScreenGui

	Style.Name = "Style"
	Style.Parent = Top
	Style.BackgroundColor3 = lib.Colors.Underline
	Style.BorderSizePixel = 0
	Style.Position = UDim2.new(0, 0, 1, 0)
	Style.Size = UDim2.new(1, 0, 0, 2)

	Body.Name = "Body"
	Body.Parent = Style
	Body.BackgroundColor3 = lib.Colors.Body
	Body.BorderSizePixel = 0
	Body.Position = UDim2.new(0, 0, 1, 0)
	Body.Size = UDim2.new(1, 0, 0, 85)

	Title.Name = "Title"
	Title.Parent = Top
	Title.BackgroundColor3 = Color3.new(1, 1, 1)
	Title.BackgroundTransparency = 1
	Title.Position = UDim2.new(0, 5, 0, 0)
	Title.Size = UDim2.new(0, 1, 1, 0)
	Title.Font = Enum.Font.Code
	Title.Text = windowTitle
	Title.TextColor3 = lib.Colors.Text
	Title.TextSize = 14
	Title.TextXAlignment = Enum.TextXAlignment.Left

	Hide.Name = "Hide"
	Hide.Parent = Top
	Hide.BackgroundColor3 = Color3.new(1, 1, 1)
	Hide.BackgroundTransparency = 1
	Hide.Position = UDim2.new(1, -25, 0, 0)
	Hide.Size = UDim2.new(0, 25, 1, 0)
	Hide.Font = Enum.Font.GothamBold
	Hide.Text = "-"
	Hide.TextColor3 = lib.Colors.HideButton
	Hide.TextSize = 14

	local hidden = true

	Hide.Activated:Connect(function()
		hidden = not hidden
		Body.Visible = hidden
	end)

	local ez = {}

	ez.Frame = Top

	local function getNextPos()
		local biggest = 0
		local ok = nil
		for _, v in pairs(Body:GetChildren()) do
			if v.Position.Y.Offset > biggest then
				biggest = v.Position.Y.Offset
				ok = v
			end
		end
		if biggest == 0 then
			biggest = biggest + 5
		else
			biggest = biggest + ok.Size.Y.Offset + 5
		end

		return biggest
	end

	function ez.AddButton(buttonText)
		local button = {
			Title = buttonText,
			Clicked = Signal.new(),
		}

		local buttonObject = Instance.new("TextButton")

		buttonObject.Name = "Button"
		buttonObject.BackgroundColor3 = lib.Colors.Button
		buttonObject.BorderColor3 = lib.Colors.Border
		buttonObject.Size = UDim2.new(0, 240, 0, 20)
		buttonObject.Font = Enum.Font.Code
		buttonObject.Text = buttonText
		buttonObject.TextColor3 = lib.Colors.Text
		buttonObject.TextSize = 15

		buttonObject.Position = UDim2.new(0, 5, 0, getNextPos())

		Body.Size = UDim2.new(1, 0, 0, getNextPos() + 5)

		buttonObject.Parent = Body

		Body.Size = UDim2.new(1, 0, 0, getNextPos())

		buttonObject.Activated:Connect(function()
			button.Clicked:Fire()
		end)

		button.Object = buttonObject

		return setmetatable({}, {
			__index = function(_, index)
				return rawget(button, index)
			end,

			__newindex = function(_, index, value)
				if index == "Title" then
					buttonObject.Text = value
					button.Title = value
				end
			end,
		})
	end

	function ez.AddTextBox(title, defaultText)
		local textBox = {
			Text = defaultText or "",
			Title = title,
			TextChanged = Signal.new(),
		}

		local textBoxObject = Instance.new("TextBox")
		textBoxObject.BackgroundColor3 = lib.Colors.Button
		textBoxObject.BorderColor3 = lib.Colors.Border
		textBoxObject.Size = UDim2.new(0, 240, 0, 20)
		textBoxObject.Font = Enum.Font.Code
		textBoxObject.PlaceholderColor3 = lib.Colors.PlaceholderText
		textBoxObject.PlaceholderText = title
		textBoxObject.Text = textBox.Text
		textBoxObject.TextColor3 = lib.Colors.Text
		textBoxObject.TextSize = 14
		textBoxObject.TextWrapped = true
		textBoxObject.ZIndex = 1

		textBoxObject.Position = UDim2.new(0, 5, 0, getNextPos())

		textBoxObject.Parent = Body
		Body.Size = UDim2.new(1, 0, 0, getNextPos())

		textBoxObject:GetPropertyChangedSignal("Text"):Connect(function()
			textBox.Text = textBoxObject.Text
			textBox.TextChanged:Fire(textBox.Text)
		end)

		textBox.Object = textBoxObject

		return setmetatable({}, {
			__index = function(_, index)
				return rawget(textBox, index)
			end,

			__newindex = function(_, index, value)
				if index == "Text" then
					textBoxObject.Text = value
					textBox.Text = value
				elseif index == "Title" then
					textBoxObject.PlaceholderText = value
					textBox.Title = value
				end
			end,
		})
	end

	function ez.AddToggle(title, default)
		local checkbox = {
			Active = default == true,
			Title = title,
			Toggled = Signal.new(),
		}

		local checkboxObject = Instance.new("TextButton")
		local checkboxLabel = Instance.new("TextLabel")

		checkboxObject.Name = "Checkbox"

		checkboxObject.BackgroundColor3 = lib.Colors.Checkbox.Unchecked
		checkboxObject.BorderColor3 = lib.Colors.Border

		checkboxObject.Size = UDim2.new(0, 20, 0, 20)
		checkboxObject.Font = Enum.Font.GothamBold
		checkboxObject.Text = ""
		checkboxObject.TextColor3 = lib.Colors.Text
		checkboxObject.TextSize = 14

		checkboxLabel.Name = "CheckboxLabel"
		checkboxLabel.Parent = checkboxObject
		checkboxLabel.BackgroundColor3 = Color3.new(1, 1, 1)
		checkboxLabel.BackgroundTransparency = 1
		checkboxLabel.Position = UDim2.new(1, 5, 0, -2)
		checkboxLabel.Size = UDim2.new(0, 200, 0, 25)
		checkboxLabel.Font = Enum.Font.Code
		checkboxLabel.Text = title
		checkboxLabel.TextColor3 = lib.Colors.Text
		checkboxLabel.TextSize = 15
		checkboxLabel.TextWrapped = true
		checkboxLabel.TextXAlignment = Enum.TextXAlignment.Left

		checkboxObject.Position = UDim2.new(0, 5, 0, getNextPos())

		checkboxObject.Parent = Body

		Body.Size = UDim2.new(1, 0, 0, getNextPos())

		local function toggled(value)
			local targetValue = not checkbox.Active

			if value ~= nil then
				targetValue = value
			end

			checkbox.Active = targetValue == true
			checkbox.Toggled:Fire(checkbox.Active)

			if checkbox.Active then
				checkboxObject.BackgroundColor3 = lib.Colors.Checkbox.Checked
			else
				checkboxObject.BackgroundColor3 = lib.Colors.Checkbox.Unchecked
			end
		end

		toggled(checkbox.Active)
		checkboxObject.Activated:Connect(function()
			toggled()
		end)

		checkbox.Object = checkboxObject

		return setmetatable({}, {
			__index = function(_, index)
				return rawget(checkbox, index)
			end,

			__newindex = function(_, index, value)
				if index == "Active" then
					toggled(value == true)
				elseif index == "Title" then
					checkboxLabel.Text = value
					checkbox.Title = value
				end
			end,
		})
	end

	function ez.AddLabel(text, align)
		local label = {
			Text = text or "",
			Align = align or "Center",
		}

		local labelObject = Instance.new("TextLabel")

		labelObject.Name = "Label"
		labelObject.BackgroundColor3 = Color3.new(1, 1, 1)
		labelObject.BackgroundTransparency = 1
		labelObject.Position = UDim2.new(0, 5, 0, 110)
		labelObject.Size = UDim2.new(1, -10, 0, 15)
		labelObject.Font = Enum.Font.Code
		labelObject.Text = label.Text
		labelObject.TextColor3 = lib.Colors.Text
		labelObject.TextSize = 15
		labelObject.TextWrapped = true
		labelObject.TextXAlignment = Enum.TextXAlignment[label.Align]

		labelObject.Position = UDim2.new(0, 5, 0, getNextPos())

		labelObject.Parent = Body

		Body.Size = UDim2.new(1, 0, 0, getNextPos() + 5)

		label.Object = labelObject

		return setmetatable({}, {
			__index = function(_, index)
				return rawget(label, index)
			end,

			__newindex = function(_, index, value)
				if index == "Text" then
					labelObject.Text = value
					label.Text = value
				elseif index == "Align" then
					labelObject.TextXAlignment = Enum.TextXAlignment[value]
					label.Align = value
				end
			end,
		})
	end

	function ez.AddDropdown(options)
		local dropdown = {
			Selection = options[1],
			Options = options,
			Selected = Signal.new(),
		}

		local dropdownObject = Instance.new("TextLabel")
		local dropdownButton = Instance.new("ImageButton")

		dropdownObject.Name = "Dropdown"

		dropdownObject.BackgroundColor3 = lib.Colors.Dropdown
		dropdownObject.BorderSizePixel = 0
		dropdownObject.Size = UDim2.new(0, 240, 0, 25)
		dropdownObject.Font = Enum.Font.Code
		dropdownObject.Text = "  " .. dropdown.Options[1]
		dropdownObject.TextColor3 = lib.Colors.Text
		dropdownObject.TextSize = 15
		dropdownObject.TextWrapped = true
		dropdownObject.TextXAlignment = Enum.TextXAlignment.Left
		dropdownObject.ZIndex = 4

		dropdownButton.Name = "DropdownBtn"
		dropdownButton.Parent = dropdownObject
		dropdownButton.BackgroundColor3 = lib.Colors.Dropdown
		dropdownButton.BackgroundTransparency = 1
		dropdownButton.Position = UDim2.new(1, -25, 0, 0)
		dropdownButton.Size = UDim2.new(0, 25, 1, 0)
		dropdownButton.Image = "rbxassetid://293296862"

		local items = Instance.new("Folder")
		items.Parent = dropdownObject
		items.Name = "items"

		local open = Instance.new("BoolValue")
		open.Parent = dropdownObject
		open.Name = "Open"
		open.Value = false

		dropdownObject.Position = UDim2.new(0, 5, 0, getNextPos())

		Body.Size = UDim2.new(1, 0, 0, getNextPos() + 5)

		dropdownObject.Parent = Body

		Body.Size = UDim2.new(1, 0, 0, getNextPos())

		local function renderOptions(rendering)
			items:ClearAllChildren()

			for _, v in pairs(rendering) do
				local option = Instance.new("TextButton")

				option.Name = v
				option.Parent = items
				option.BackgroundColor3 = lib.Colors.Dropdown
				option.BorderColor3 = lib.Colors.Border
				option.BorderSizePixel = 0
				option.Position = UDim2.new(0, 0, #items:GetChildren(), 0)
				option.Size = UDim2.new(0, 240, 0, 25)
				option.Font = Enum.Font.Code
				option.Text = " " .. v
				option.TextColor3 = lib.Colors.Text
				option.TextSize = 15
				option.TextXAlignment = Enum.TextXAlignment.Left
				option.Visible = false
				option.ZIndex = 5

				option.Activated:Connect(function()
					dropdown.Selection = v
					dropdown.Selected:Fire(v)
					dropdownObject.Text = "  " .. v
					open.Value = false
				end)
			end
		end

		renderOptions(dropdown.Options)

		dropdownButton.Activated:Connect(function()
			for _, v in pairs(items:GetChildren()) do
				open.Value = true
				v.Visible = true
			end
		end)

		dropdown.Object = dropdownObject

		return setmetatable({}, {
			__index = function(_, index)
				return rawget(dropdown, index)
			end,

			__newindex = function(_, index, value)
				if index == "Selection" then
					dropdownObject.Text = "  " .. value
					dropdown.Selection = value
				elseif index == "Options" then
					dropdown.Options = value
					renderOptions(value)
				end
			end,
		})
	end

	UserInputService.InputBegan:Connect(function(key, chatting)
		if chatting then
			return
		end

		if key.KeyCode == visiblityKeybind then
			Top.Visible = not Top.Visible
		end
	end)

	Dragify(Top, 0.05)

	return ez
end

return lib
